"use strict";(self.webpackChunkjavabrains_bootcamp=self.webpackChunkjavabrains_bootcamp||[]).push([[7107],{3905:(e,a,t)=>{t.d(a,{Zo:()=>s,kt:()=>u});var n=t(7294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function p(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,o=function(e,a){if(null==e)return{};var t,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=n.createContext({}),l=function(e){var a=n.useContext(c),t=a;return e&&(t="function"==typeof e?e(a):p(p({},a),e)),t},s=function(e){var a=l(e.components);return n.createElement(c.Provider,{value:a},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},b=n.forwardRef((function(e,a){var t=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=l(t),b=o,u=m["".concat(c,".").concat(b)]||m[b]||d[b]||r;return t?n.createElement(u,p(p({ref:a},s),{},{components:t})):n.createElement(u,p({ref:a},s))}));function u(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var r=t.length,p=new Array(r);p[0]=b;var i={};for(var c in a)hasOwnProperty.call(a,c)&&(i[c]=a[c]);i.originalType=e,i[m]="string"==typeof e?e:o,p[1]=i;for(var l=2;l<r;l++)p[l]=t[l];return n.createElement.apply(null,p)}return n.createElement.apply(null,t)}b.displayName="MDXCreateElement"},8836:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>p,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var n=t(7462),o=(t(7294),t(3905));const r={},p="Comparable and Comparator",i={unversionedId:"java-backend-bootcamp/java-collections/comparable-and-comparator",id:"java-backend-bootcamp/java-collections/comparable-and-comparator",title:"Comparable and Comparator",description:"In Java, Comparable and Comparator are two interfaces that are used to sort collections of objects.",source:"@site/docs/java-backend-bootcamp/java-collections/comparable-and-comparator.md",sourceDirName:"java-backend-bootcamp/java-collections",slug:"/java-backend-bootcamp/java-collections/comparable-and-comparator",permalink:"/java-backend-bootcamp/docs/java-backend-bootcamp/java-collections/comparable-and-comparator",draft:!1,editUrl:"https://github.com/koushikkothagal/java-backend-bootcamp/tree/main/website/docs/java-backend-bootcamp/java-collections/comparable-and-comparator.md",tags:[],version:"current",frontMatter:{},sidebar:"javaBackendBootcamp",previous:{title:"The List interface",permalink:"/java-backend-bootcamp/docs/java-backend-bootcamp/java-collections/the-list-interface"},next:{title:"The Set interface",permalink:"/java-backend-bootcamp/docs/java-backend-bootcamp/java-collections/the-set-interface"}},c={},l=[],s={toc:l};function m(e){let{components:a,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},s,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"comparable-and-comparator"},"Comparable and Comparator"),(0,o.kt)("p",null,"In Java, ",(0,o.kt)("inlineCode",{parentName:"p"},"Comparable")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Comparator")," are two interfaces that are used to sort collections of objects."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Comparable")," is a built-in interface in Java that is used to define the natural ordering of objects. When an object implements the ",(0,o.kt)("inlineCode",{parentName:"p"},"Comparable"),' interface, it is able to compare itself to other objects of the same type and determine which one is "greater" or "lesser". The compareTo() method defined by the ',(0,o.kt)("inlineCode",{parentName:"p"},"Comparable")," interface is used to perform the comparison."),(0,o.kt)("p",null,"For example, if a class Person implements the ",(0,o.kt)("inlineCode",{parentName:"p"},"Comparable")," interface and defines a ",(0,o.kt)("inlineCode",{parentName:"p"},"compareTo()")," method that compares two ",(0,o.kt)("inlineCode",{parentName:"p"},"Person")," objects based on their age, then a list of ",(0,o.kt)("inlineCode",{parentName:"p"},"Person")," objects can be sorted by age using the ",(0,o.kt)("inlineCode",{parentName:"p"},"Collections.sort()")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'class Person implements Comparable<Person> {\n    private int age;\n    private String name;\n\n    // constructor and getters\n\n    @Override\n    public int compareTo(Person other) {\n        return this.age - other.age;\n    }\n}\n\nList<Person> people = new ArrayList<>();\npeople.add(new Person(25, "John"));\npeople.add(new Person(30, "Jane"));\npeople.add(new Person(20, "Bob"));\nCollections.sort(people);\n')),(0,o.kt)("p",null,"On the other hand, ",(0,o.kt)("inlineCode",{parentName:"p"},"Comparator")," is a separate interface that can be used to define a custom sorting order for a class that does not implement ",(0,o.kt)("inlineCode",{parentName:"p"},"Comparable"),". It is useful when the natural ordering of a class is not the ordering that we desire. A ",(0,o.kt)("inlineCode",{parentName:"p"},"Comparator")," can be defined as a separate class or as an anonymous inner class. The ",(0,o.kt)("inlineCode",{parentName:"p"},"compare()")," method is used to perform the comparison."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'class Person {\n    private int age;\n    private String name;\n    // constructor and getters\n}\n\nList<Person> people = new ArrayList<>();\npeople.add(new Person(25, "John"));\npeople.add(new Person(30, "Jane"));\npeople.add(new Person(20, "Bob"));\nCollections.sort(people, new Comparator<Person>() {\n    @Override\n    public int compare(Person p1, Person p2) {\n        return p1.getName().compareTo(p2.getName());\n    }\n});\n')),(0,o.kt)("p",null,"In the above example, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Person")," class doesn't implement ",(0,o.kt)("inlineCode",{parentName:"p"},"Comparable")," (or it might and we want a different order!) and the ",(0,o.kt)("inlineCode",{parentName:"p"},"List")," is sorted by name using a comparator."),(0,o.kt)("p",null,"In summary, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Comparable")," interface is used to define the natural ordering of objects, while the ",(0,o.kt)("inlineCode",{parentName:"p"},"Comparator")," interface can be used to define a custom sorting order for objects that do not implement Comparable."))}m.isMDXComponent=!0}}]);