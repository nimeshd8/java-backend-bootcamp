"use strict";(self.webpackChunkjavabrains_bootcamp=self.webpackChunkjavabrains_bootcamp||[]).push([[6043],{3905:(e,n,a)=>{a.d(n,{Zo:()=>p,kt:()=>h});var t=a(7294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=t.createContext({}),c=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},p=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(a),u=i,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||r;return a?t.createElement(h,s(s({ref:n},p),{},{components:a})):t.createElement(h,s({ref:n},p))}));function h(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=a.length,s=new Array(r);s[0]=u;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[m]="string"==typeof e?e:i,s[1]=o;for(var c=2;c<r;c++)s[c]=a[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9298:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var t=a(7462),i=(a(7294),a(3905));const r={},s="Inheritance",o={unversionedId:"java-backend-bootcamp/java-basics/inheritance",id:"java-backend-bootcamp/java-basics/inheritance",title:"Inheritance",description:"Inheritance is one of the key concepts in object-oriented programming. Inheritance allows a class to inherit properties and methods from another class, which helps to reduce code duplication and improves code reusability.",source:"@site/docs/java-backend-bootcamp/java-basics/inheritance.md",sourceDirName:"java-backend-bootcamp/java-basics",slug:"/java-backend-bootcamp/java-basics/inheritance",permalink:"/java-backend-bootcamp/docs/java-backend-bootcamp/java-basics/inheritance",draft:!1,editUrl:"https://github.com/koushikkothagal/java-backend-bootcamp/tree/main/website/docs/java-backend-bootcamp/java-basics/inheritance.md",tags:[],version:"current",frontMatter:{},sidebar:"javaBackendBootcamp",previous:{title:"The static Keyword",permalink:"/java-backend-bootcamp/docs/java-backend-bootcamp/java-basics/static"},next:{title:"Nested and Inner Classes in Java",permalink:"/java-backend-bootcamp/docs/java-backend-bootcamp/java-basics/nested-and-inner-classes"}},l={},c=[],p={toc:c};function m(e){let{components:n,...a}=e;return(0,i.kt)("wrapper",(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"inheritance"},"Inheritance"),(0,i.kt)("p",null,"Inheritance is one of the key concepts in object-oriented programming. Inheritance allows a class to inherit properties and methods from another class, which helps to reduce code duplication and improves code reusability."),(0,i.kt)("p",null,"The basic syntax for inheritance in Java is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class subclass_name extends superclass_name {\n    // properties and methods\n}\n")),(0,i.kt)("p",null,"Here, the subclass_name is the name of the class that is inheriting from the superclass_name. The keyword ",(0,i.kt)("inlineCode",{parentName:"p"},"extends")," is used to indicate that the subclass is inheriting from the superclass."),(0,i.kt)("p",null,"Let's take an example to understand this better. We have a class called ",(0,i.kt)("inlineCode",{parentName:"p"},"Animal")," which has properties like ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"age"),". We also have a class called ",(0,i.kt)("inlineCode",{parentName:"p"},"Dogs")," which has additional properties like ",(0,i.kt)("inlineCode",{parentName:"p"},"breed")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"color"),". We can use inheritance to create the ",(0,i.kt)("inlineCode",{parentName:"p"},"Dogs")," class by inheriting from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Animals")," class."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Animals {\n    String name;\n    int age;\n}\n\nclass Dogs extends Animals {\n    String breed;\n    String color;\n}\n")),(0,i.kt)("p",null,"In this example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Dogs")," class inherits the properties ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"age")," from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Animals")," class. This means that the ",(0,i.kt)("inlineCode",{parentName:"p"},"Dogs")," class can use the properties ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"age")," without having to define them again."),(0,i.kt)("p",null,"The subclass can also have its own methods and properties in addition to those inherited from the superclass."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'class Animals {\n    String name;\n    int age;\n    public void eat(){\n        System.out.println("Animal eat");\n    }\n}\n\nclass Dogs extends Animals {\n    String breed;\n    String color;\n    public void bark(){\n        System.out.println("Dogs bark");\n    }\n}\n')),(0,i.kt)("p",null,"Java also provides the ability to override methods of the superclass. This means that a subclass can provide a different implementation for a method that is already defined in the superclass."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'class Animals {\n    String name;\n    int age;\n    public void eat(){\n        System.out.println("Animals eat");\n    }\n}\n\nclass Dogs extends Animals {\n    String breed;\n    String color;\n    public void eat(){\n        System.out.println("Dogs eat differently");\n    }\n    public void bark(){\n        System.out.println("Dogs bark");\n    }\n}\n')),(0,i.kt)("p",null,"There is also a ",(0,i.kt)("inlineCode",{parentName:"p"},"super")," keyword, which is used to call the superclass version of an overridden method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'class Animals {\n    String name;\n    int age;\n    public void eat(){\n        System.out.println("Animals eat");\n    }\n}\n\nclass Dogs extends Animals {\n    String breed;\n    String color;\n    public void eat(){\n        super.eat();\n        System.out.println("Dogs eat differently");\n    }\n    public void bark(){\n        System.out.println("Dogs bark");\n    }\n}\n')),(0,i.kt)("p",null,"In addition to single inheritance, Java also supports multi-level inheritance, where a class can inherit from a class that inherits from another class. This allows for a more complex class hierarchy and can further improve code reusability."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'class Animals {\n    String name;\n    int age;\n    public void eat(){\n        System.out.println("Animals eat");\n    }\n}\n\nclass Mammals extends Animals {\n    int numberOfLegs;\n    public void walk(){\n        System.out.println("Mammals walk");\n    }\n}\n\nclass Dogs extends Mammals {\n    String breed;\n    String color;\n    public void eat(){\n        super.eat();\n        System.out.println("Dogs eat differently");\n    }\n    public void bark(){\n        System.out.println("Dogs bark");\n    }\n}\n')),(0,i.kt)("p",null,"In this example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Dogs")," class inherits from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Mammals")," class, which in turn inherits from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Animals")," class. This allows the ",(0,i.kt)("inlineCode",{parentName:"p"},"Dogs")," class to access properties and methods from both the ",(0,i.kt)("inlineCode",{parentName:"p"},"Mammals")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Animals")," class."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Java does not support multiple inheritance, where a class can inherit from multiple classes. However, the interface feature in Java can be used to achieve similar functionality.")),(0,i.kt)("p",null,"In conclusion, inheritance is a powerful feature in object-oriented programming that allows for code reusability and improves the structure of your code. It is important to understand the basics of inheritance, including the syntax, the ",(0,i.kt)("inlineCode",{parentName:"p"},"extends")," keyword, method overriding, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"super")," keyword. With the help of this feature, we can create a well-organized class hierarchy and reduce code duplication."))}m.isMDXComponent=!0}}]);